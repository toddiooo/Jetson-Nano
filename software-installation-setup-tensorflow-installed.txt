#to get a fresh start: #this may take 30-40 minutes.
sudo apt update && sudo apt upgrade

#to install pip and pip3:
sudo apt install python3-pip
sudo python3 -m pip install --upgrade pip

#To install nano:
sudo apt install nano

#to install matplotlib:
#sudo apt install python3-matplotlib

#to upgrade Numpy:
sudo pip3 install numpy==1.16.1
pip3 list | grep numpy

#to install openCV:
sudo apt install python3-opencv
sudo apt remove python3-opencv
#----------------------------------------------------------------------------------------#
#install TensorFlow:

sudo apt install python3-pip python3-dev
python3 -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/
pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
sudo apt install python3-scipy -y
sudo apt install python3-pandas -y
sudo apt install python3-sklearn -y
sudo apt install python3-seaborn -y
sudo pip install cython

sudo apt-get update

sudo apt install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran

sudo pip3 install -U numpy==1.16.1 future==0.18.2 mock==3.0.5 h5py==2.10.0 keras_preprocessing==1.1.1 keras_applications==1.0.8 gast==0.2.2 futures protobuf pybind11 astor

sudo wget --no-check-certificate https://developer.download.nvidia.com/compute/redist/jp/v461/tensorflow/tensorflow-2.7.0+nv22.1-cp36-cp36m-linux_aarch64.whl

pip3 install tensorflow-2.7.0+nv22.1-cp36-cp36m-linux_aarch64.whl --user

#----------------------------------------------------------------------------------------#
#https://blog.csdn.net/m0_51004308/article/details/114697416?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-114697416-blog-50736300.235^v43^pc_blog_bottom_relevance_base7&spm=1001.2101.3001.4242.1&utm_relevant_index=3#5tensorflowgpu_100
#----------------------------------------------------------------------------------------#
#to install code-oss:
cd Downloads
sudo apt install curl

curl -L https://github.com/toolboc/vscode/releases/download/1.32.3/code-oss_1.32.3-arm64.deb -o code-oss_1.32.3-arm64.deb

sudo dpkg -i code-oss_1.32.3-arm64.deb

code-oss

#right click mouse on the desktop, and then create a folder on the desktop called pyPro
#at Code-oss, file-&gt;open folder-&gt;select pyPro, then click “ok”
#at Code-oss, add extensions-&gt;search python, click the “python” extension
#at the code-oss interface, click ctrl+Shift+P, type “select interpreter”

#----------------------------------------------------------------------------------------#
sudo apt-get install python3-pip
sudo pip3 install adafruit-circuitpython-servokit
sudo usermod -aG i2c todd
sudo groupadd -f -r gpio
sudo useradd -a -G gpio todd
cd ~
git clone https://github.com/NVIDIA/jetson-gpio.git
sudo cp ~/jetson-gpio/lib/python/Jetson/GPIO/99-gpio.rules /etc/udev/rules.d
sudo udevadm control --reload-rules&& sudo udevadm trigger

sudo reboot now

sudo i2cdetect -y -r 1

#---------------need to change two places, the other one is the buffer one--------------#
The syntax error you're encountering is due to the use of the positional-only parameter syntax (/) in a function definition, which is not supported in Python versions earlier than 3.8. This feature allows the function to specify that certain parameters must be specified positionally and cannot be used as keyword arguments.

Since you're using Python 3.6.9, you'll encounter a SyntaxError when trying to use or define a function with this syntax, as it was introduced in Python 3.8.

Modifying the Code
If upgrading Python is not an option, you will need to modify the code to be compatible with Python 3.6.9. This involves removing the positional-only parameter syntax. Here's how you can modify the function definition:

Terminal:
cd /usr/local/lib/python3.6/dist-packages/circuitpython_typing
sudo gedit __init__.py

From:
python code
def read(self, count: Optional[int] = None, /) -> Optional[bytes]:

To (remove the /):
python code
def read(self, count: Optional[int] = None) -> Optional[bytes]:

By removing the /, the function loses the enforcement of positional-only parameters, but it becomes syntactically valid in Python 3.6.9. This change should not affect the function's behavior unless you specifically need to prevent users from using named arguments for certain parameters.
#----------------------------------------------------------------------------------------#

The AttributeError you're encountering indicates that the Python code is attempting to access an attribute, JH71x0, within the module adafruit_platformdetect.constants.chips that does not exist. 

Solutions
1. Update the adafruit_platformdetect Library
The first step to resolve this issue is to ensure you have the latest version of the adafruit_platformdetect library, as updates may include support for new chips or corrections to issues like the one you're experiencing. You can update the library using pip:

bash code
pip3 install Adafruit-PlatformDetect
pip install --upgrade adafruit_platformdetect

If you are using a specific Python version or a virtual environment, make sure to activate the environment or use the correct pip version (e.g., pip3, pip3.6) corresponding to your Python installation.

2. Manually adding a placeholder or correcting a reference in a library's source code, such as adafruit_platformdetect

Step 1: Locate the Library's Installation Directory
First, you need to find where the adafruit_platformdetect library is installed on your system. You can usually find this path by using the Python interpreter:

pythoncode:
import adafruit_platformdetect
print(adafruit_platformdetect.__file__)

This will print the path to the __init__.py file of the adafruit_platformdetect package. The directory containing this file is where you'll find the constants module and the chips.py file.

Step 2: Edit the chips.py File
Navigate to the constants directory within the adafruit_platformdetect package directory. Open the chips.py file in a text editor with administrative or root privileges if necessary.

To add a placeholder for the JH71x0 chip, you would typically add a line defining it. Find a section of the file where chip identifiers are defined (they might be organized in an enumeration or a series of constant definitions), and add your chip. For example:

Terminal:
cd /usr/local/lib/python3.6/dist-packages/adafruit_platformdetect/constants
sudo chips.py

python code: add the following line
JH71x0 = "JH71x0"
#----------------------------------------------------------------------------------------#






